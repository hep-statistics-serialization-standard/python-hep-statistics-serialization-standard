#!/usr/bin/python
# -*- coding: utf-8 -*-

def getkeys(e):
    if type(e) == dict:
        return e.keys()
    if type(e) == list:
        return range(0,len(e))
    return []


    
def make_patch_helper(src,dst,out,prefix,ignore,precision):
    allkeys = set()
    dstkeys = getkeys(dst)
    srckeys = getkeys(src)
    allkeys.update(dstkeys)
    allkeys.update(srckeys)
    for k in allkeys:
        thisprefix = prefix + [str(k)]
        if k in ignore:
            continue
        if not k in dstkeys:
            out.append({'op': 'remove', 'path': "/".join(thisprefix), "value":src[k]})
        elif not k in srckeys:
            out.append({'op': 'add', 'path': "/".join(thisprefix), "value":dst[k]})
        elif type(src[k]) != type(dst[k]):
            out.append({'op': 'replace', 'path': "/".join(thisprefix), "orig":src[k], "new":dst[k]})
        elif src[k] != dst[k]:
            if type(src[k]) == str:
                out.append({'op': 'replace', 'path': "/".join(thisprefix), "orig":src[k], "new":dst[k]})
            elif type(src[k]) == float and 2*(src[k]-dst[k])/(src[k]+dst[k]) > pow(10,-precision):
                out.append({'op': 'replace', 'path': "/".join(thisprefix), "orig":src[k], "new":dst[k]})
            else:
                make_patch_helper(src[k],dst[k],out,thisprefix, ignore, precision)
                
                
def make_patch(src, dst, ignore, precision):
    out = []
    make_patch_helper(src, dst, out, prefix=[], ignore=ignore, precision=precision)
    return out



def get(js,path):
    if not path:
        return js
    try:
        key = int(path[0])
    except ValueError:
        key = path[0]
    try:
        if len(path) == 1:
            return js[key]
        else:
            return get(js[key],path[1:])
    except (IndexError,KeyError):
        print("cannot find element "+str(key)+" in container "+str(js))

def diff_patch(patch):
    output = []
    green = '\x1b[32m'
    red = '\x1b[31m'
    yellow = '\x1b[33m'
    endgreen = '\x1b[0m'
    endyellow = '\x1b[0m'        
    endred = '\x1b[0m'

    for op in patch:
        if op["op"] == 'add':
            output.append(green+ op["path"] + ": "+str(op["value"])+endgreen)
        if op["op"] == 'replace':
            output.append(yellow+op["path"] + ": "+str(op["orig"]) + " <> "+str(op["new"])+endyellow)
        elif op["op"] == 'remove':
            output.append(red+op["path"]+endred)
    return output

def main(args):
    from sys import exit
    try:
        import json
        doc1 = json.load(args.FILE1)
        doc2 = json.load(args.FILE2)
        patch = make_patch(doc1, doc2, args.ignore, args.precision)
        for line in diff_patch(patch):
            print(line)
    except KeyboardInterrupt:
        exit(1)

if __name__ == "__main__":
    import argparse    
    parser = argparse.ArgumentParser(description='Diff two JSON files')
    parser.add_argument('FILE1', type=argparse.FileType('r'))
    parser.add_argument('FILE2', type=argparse.FileType('r'))
    parser.add_argument('--indent', type=int, default=None,
                        help='Indent output by n spaces')
    parser.add_argument("--ignore",nargs="+",help="ignore the following top level sections")
    parser.add_argument("--precision",type=int,help="number of decimal places to compare",default=6)

    args = parser.parse_args()
    
    main(args)
